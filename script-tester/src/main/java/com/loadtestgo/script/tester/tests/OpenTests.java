package com.loadtestgo.script.tester.tests;

import com.loadtestgo.script.api.ErrorType;
import com.loadtestgo.script.api.HttpRequest;
import com.loadtestgo.script.api.Page;
import com.loadtestgo.script.api.TestResult;
import com.loadtestgo.script.tester.framework.JavaScriptTest;
import com.loadtestgo.script.tester.server.TestServer;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

/**
 * Test browser open options
 */
public class OpenTests extends JavaScriptTest {
    @Test
    public void statusOk() {
        String url = getTestUrl("status/code200");
        String script = String.format(
            "var b = pizza.open(\"%s\");\n" +
            "assert.eq(b.getUrl(), \"%s\");\n",
            url, url);

        TestResult result = runScript(script);

        assertNoError(result);
        assertOnePage(result);
        assertOneRequest(result);
        HttpRequest request = getFirstRequest(result);
        assertEquals(200, request.getStatusCode());
        assertEquals("HTTP/1.1", request.getProtocol().toUpperCase());
        assertEquals("OK", request.getStatusText());
        assertEquals(HttpRequest.State.Complete, request.getState());
    }

    @Test
    public void status404() {
        String url = "status/code404";
        TestResult result = basicGetTestUrl(url);

        assertError(
            String.format("Error fetching '%s': HTTP status '404 Not Found'", getTestUrl(url)),
            ErrorType.Navigation, result);

        assertOnePage(result);
        assertOneRequest(result);
        HttpRequest request = getFirstRequest(result);
        assertEquals(404, request.getStatusCode());
        assertEquals("HTTP/1.1", request.getProtocol().toUpperCase());
        assertEquals("Not Found", request.getStatusText());
        assertEquals(HttpRequest.State.Complete, request.getState());
    }

    @Test
    public void status500() {
        String url = "status/code500";
        TestResult result = basicGetTestUrl(url);

        assertError(
            String.format("Error fetching '%s': HTTP status '500 Internal Error'",
                getTestUrl("status/code500")),
            ErrorType.Navigation, result);

        assertOnePage(result);
        assertOneRequest(result);
        HttpRequest request = getFirstRequest(result);
        assertEquals(500, request.getStatusCode());
        assertEquals("HTTP/1.1", request.getProtocol().toUpperCase());
        assertEquals("Internal Error", request.getStatusText());
        assertEquals(HttpRequest.State.Complete, request.getState());
    }

    @Test
    public void redirectStatus404() {
        String url = "redirect/status404";
        TestResult result = basicGetTestUrl(url);

        assertError(
            String.format("Error fetching '%s': HTTP status '404 Not Found'",
                getTestUrl("status/code404")),
            ErrorType.Navigation, result);

        assertOnePage(result);
        assertNumRequests(2, result);
        HttpRequest request = getRequest(1, result);
        assertEquals(404, request.getStatusCode());
        assertEquals("HTTP/1.1", request.getProtocol().toUpperCase());
        assertEquals("Not Found", request.getStatusText());
        assertEquals(HttpRequest.State.Complete, request.getState());
    }

    @Test
    public void redirectStatus500() {
        String url = "redirect/status500";
        TestResult result = basicGetTestUrl(url);

        assertError(
            String.format("Error fetching '%s': HTTP status '500 Internal Error'",
                getTestUrl("status/code500")),
            ErrorType.Navigation, result);

        assertOnePage(result);
        assertNumRequests(2, result);
        HttpRequest request = getRequest(1, result);
        assertEquals(500, request.getStatusCode());
        assertEquals("HTTP/1.1", request.getProtocol().toUpperCase());
        assertEquals("Internal Error", request.getStatusText());
        assertEquals(HttpRequest.State.Complete, request.getState());
    }

    @Test
    public void redirectBasic() {
        TestResult result = basicGetTestUrl("redirect/basic");
        assertNoError(result);
        assertOnePage(result);
        HttpRequest redirectRequest = getFirstRequest(result);
        assertEquals(301, redirectRequest.getStatusCode());
        assertEquals("HTTP/1.1", redirectRequest.getProtocol().toUpperCase());
        assertEquals("Moved Permanently", redirectRequest.getStatusText());
        assertEquals(getTestUrl("status/code200"), redirectRequest.getRedirectUrl());

        Page page = result.getPage(0);

        HttpRequest request = page.getRequests().get(1);
        assertEquals(redirectRequest.getRedirectUrl(), request.getUrl());
        assertNull(request.getRedirectUrl());
        assertEquals(200, request.getStatusCode());
        assertEquals("HTTP/1.1", request.getProtocol().toUpperCase());
        assertEquals("OK", request.getStatusText());

        assertEquals(getTestUrl("redirect/basic"), page.getOrigUrl());
        assertEquals(getTestUrl("status/code200"), page.getUrl());

        assertEquals(HttpRequest.State.Complete, redirectRequest.getState());
        assertEquals(HttpRequest.State.Complete, request.getState());

        assertEquals(Page.State.NavigationCompleted, page.getState());
    }

    @Test
    public void redirectJavaScript() {
        TestResult result = basicGetTestUrl("files/redirect.html");
        assertNoError(result);
        assertEquals(2, result.getPages().size());

        Page page1 = result.getPage(0);
        assertOneRequest(page1);

        // Check that the navigation at least committed and was processed,
        // it may not have completed as Chrome may have decided to abort loading
        // the page and move on to the redirect.
        assertTrue("page state must be NavigationCommitted || NavigationCompleted",
            page1.getState() == Page.State.NavigationCommitted ||
            page1.getState() == Page.State.NavigationCompleted);

        Page page2 = result.getPage(1);
        assertOneRequest(page2);
        assertEquals(Page.State.NavigationCompleted, page2.getState());

        HttpRequest request1 = page1.getRequests().get(0);
        assertEquals(200, request1.getStatusCode());
        assertEquals("HTTP/1.1", request1.getProtocol().toUpperCase());
        assertEquals("OK", request1.getStatusText());
        assertEquals(getTestUrl("files/redirect.html"), request1.getUrl());
        assertEquals(getTestUrl("files/redirect.html"), page1.getUrl());

        HttpRequest request2 = page2.getRequests().get(0);

        assertEquals(200, request2.getStatusCode());
        assertEquals("HTTP/1.1", request2.getProtocol().toUpperCase());
        assertEquals("OK", request2.getStatusText());
        assertEquals(getTestUrl("files/basic.html"), request2.getUrl());
        assertEquals(getTestUrl("files/basic.html"), page2.getUrl());

        assertEquals(HttpRequest.State.Complete, request1.getState());
        assertEquals(HttpRequest.State.Complete, request2.getState());
    }

    @Test
    public void serverClosedSocketEarly() {
        String url = "bad/closeAfterHeadersRead";
        TestResult result = basicGetTestUrl(url);

        assertError(
            String.format("Error navigating to '%s': net::ERR_EMPTY_RESPONSE",
                getTestUrl(url)),
            ErrorType.Navigation, result);

        assertOnePage(result);
        assertOneRequest(result);
        Page page = result.getPage(0);
        assertEquals(Page.State.NavigationError, page.getState());
        assertEquals(Page.Error.EmptyResponse, page.getError());
        HttpRequest request = getFirstRequest(result);
        assertNull(request.getProtocol());
        assertNull(request.getStatusText());
        assertEquals(0, request.getStatusCode());
        assertEquals(HttpRequest.State.Complete, request.getState());
    }

    @Test
    public void invalidResponseLine() {
        String url = "bad/responseLineInvalid";

        TestResult result = basicGetTestUrl(url);

        int version = result.getBrowserVersionMajor();

        // Chrome keeps breaking this test with different
        if (version == 55 || version >= 57) {
            assertError(
                String.format("Error navigating to '%s': net::ERR_INVALID_HTTP_RESPONSE",
                    getTestUrl(url)),
                ErrorType.Navigation, result);
            assertOnePage(result);

            assertOneRequest(result);

            Page page = result.getPage(0);
            assertEquals(Page.State.NavigationError, page.getState());
            assertEquals(Page.Error.InvalidResponse, page.getError());
            HttpRequest request = getFirstRequest(result);
            assertNull(request.getStatusText());
            assertEquals(0, request.getStatusCode());
            assertEquals(HttpRequest.State.Complete, request.getState());
        } else {
            assertNoError(result);
            assertOnePage(result);
            assertOneRequest(result);
            assert200OK(getFirstRequest(result));

            Page page = result.getPage(0);
            assertEquals(Page.State.NavigationCompleted, page.getState());
        }
    }

    @Test
    public void redirectLoop() {
        TestResult result = basicGetTestUrl("redirect/infinite");

        assertError(
            String.format("Error navigating to '%s': net::ERR_TOO_MANY_REDIRECTS",
                getTestUrl("redirect/infinite")),
            ErrorType.Navigation, result);

        assertOnePage(result);
        assertMoreThanOneRequest(result);
        Page page = result.getPage(0);
        assertEquals(Page.State.NavigationError, page.getState());
        assertEquals(Page.Error.TooManyRedirects, page.getError());
        HttpRequest request = getFirstRequest(result);
        assertEquals(301, request.getStatusCode());
        assertEquals(HttpRequest.State.Complete, request.getState());
    }

    @Test
    public void unknownHost() {
        String url = "http://aslkdfjasdfkl/";
        TestResult result = basicGetUrl(url);

        assertError(
            String.format("Error navigating to '%s': net::ERR_NAME_NOT_RESOLVED", url),
            ErrorType.Navigation, result);

        assertOnePage(result);
        assertOneRequest(result);
        Page page = result.getPage(0);
        assertEquals(Page.State.NavigationError, page.getState());
        assertEquals(Page.Error.UnknownHostname, page.getError());
        HttpRequest request = getFirstRequest(result);
        assertEquals(0, request.getStatusCode());
        assertNull(request.getIp());
        assertNull(request.getStatusText());
        assertEquals(HttpRequest.State.Complete, request.getState());
    }

    @Test
    public void invalidUrl() {
        TestResult result = basicGetUrl("data:aslkdfjasdfkl");

        assertError("Cannot navigate to invalid URL", ErrorType.Navigation, result);
        assertNoRequests(result);
        assertNoPages(result);
    }

    @Test
    public void historyAndReloadPage() {
        String script = String.format(
            "var b = pizza.open(\'%s\');\n" +
                "b.open(\'%s\');\n" +
                "b.back();\n" +
                "b.forward();\n" +
                "b.reload();",
            getTestUrl("files/basic.html"),
            getTestUrl("files/form.html"));

        TestResult result = runScript(script);

        assertEquals(5, result.getPages().size());
        assertEquals(getTestUrl("files/basic.html"), result.getPage(0).getOrigUrl());
        assertEquals(getTestUrl("files/form.html"), result.getPage(1).getOrigUrl());
        assertEquals(getTestUrl("files/basic.html"), result.getPage(2).getOrigUrl());
        assertEquals(getTestUrl("files/form.html"), result.getPage(3).getOrigUrl());
        assertEquals(getTestUrl("files/form.html"), result.getPage(4).getOrigUrl());
    }

    /**
     * Go to the test site and check that the ignoreCertErrors option works
     */
    @Test
    public void ignoreCerts() {
        TestServer server = getServer();
        String url = String.format("https://%s:3005/", server.getHostName());

        String script = String.format(
            "var b = pizza.open({ignoreCertErrors:true});\n" +
            "b.open('%s');\n" +
            "b.verifyText('SSL Protocol');",
            url);

        TestResult result = runScript(script);

        assertNoError(result);
        assertEquals(1, result.getPages().size());
    }

    /**
     * Test what happens when the URL is changed in the page without
     * doing a page reload.
     */
    @Test
    public void navigationWithUrlChange() {
        TestResult result = basicGetTestUrl("files/urlChange.html");
        assertNoError(result);
        assertEquals(1, result.getPages().size());

        Page page = result.getPage(0);
        assertOneRequest(page);
        assertEquals(Page.State.NavigationCompleted, page.getState());

        HttpRequest request = page.getRequests().get(0);
        assertEquals(200, request.getStatusCode());
        assertEquals("HTTP/1.1", request.getProtocol().toUpperCase());
        assertEquals("OK", request.getStatusText());
        assertEquals(getTestUrl("files/urlChange.html"), request.getUrl());
        assertEquals(getTestUrl("files/dummyUrl.html"), page.getUrl());
        assertEquals(HttpRequest.State.Complete, request.getState());
    }

    @Test
    public void openTimeout1() {
        String script = String.format(
            "var b = pizza.open();\n" +
            "b.open('%s', 1000);\n",
            getTestUrl("files/longLoad.html"));

        TestResult result = runScript(script, 3000);

        assertError("Timeout after 1000ms while waiting for page to load", ErrorType.Navigation, result);
        assertEquals(1, result.getPages().size());
    }

    @Test
    public void openTimeout2() {
        String script = String.format(
            "pizza.open('%s', 1000);\n",
            getTestUrl("files/longLoad.html"));

        TestResult result = runScript(script, 3000);

        assertError("Timeout after 1000ms while waiting for page to load", ErrorType.Navigation, result);
        assertEquals(1, result.getPages().size());
    }

    @Test
    public void openScriptTimeout() {
        String script = String.format(
            "var b = pizza.open();\n" +
            "b.open('%s');\n",
            getTestUrl("files/longLoad.html"));

        TestResult result = runScript(script, 2000);

        assertError("Script interrupted", ErrorType.Timeout, result);
        assertEquals(1, result.getPages().size());
    }

    @Test
    public void openDefaultTimeout() {
        String script = String.format(
            "pizza.setWaitTimeout(1000);\n" +
            "pizza.open('%s');\n",
            getTestUrl("files/longLoad.html"));

        TestResult result = runScript(script, 2000);

        assertError("Timeout after 1000ms while waiting for page to load", ErrorType.Navigation, result);
        assertEquals(1, result.getPages().size());
    }
}
