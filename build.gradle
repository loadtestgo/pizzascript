subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    ext {
        jacksonVersion = '2.4.3'
        rhinoVersion = '1.7.7'
        tinylogVersion = '1.0'
        iocommonsVersion = '2.4'
        rsyntaxVersion = '2.5.8'
        orgJsonVersion = '20140107'
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        // Make sure warnings are on
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    version = "$majorVersion.$buildNumber"
    group = "com.loadtestgo";

    jar {
        manifest {
            attributes 'Implementation-Title': 'PizzaScript', 'Implementation-Version': archiveVersion
        }
    }

    repositories {
        mavenCentral()
    }

    configurations.all {
        resolutionStrategy {
            // Fail if we use multiple version of the same library in the same
            // project.
            failOnVersionConflict()
        }
    }

    dependencies {
        testImplementation 'junit:junit:4.+'
        testImplementation 'org.jmockit:jmockit:1.20'
    }
}

project(':script-api') {
    dependencies {
        implementation project(':util')
        implementation "org.mozilla:rhino:$rhinoVersion"
        implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        implementation "org.tinylog:tinylog:$tinylogVersion"
    }
}

project(':util') {
    dependencies {
        implementation "commons-io:commons-io:$iocommonsVersion"
        implementation "org.tinylog:tinylog:$tinylogVersion"
    }
}

project(':mov-writer') {
}

project(':websocket') {
}

project(':script-engine') {
    dependencies {
        implementation project(':script-api')
        implementation project(':util')
        implementation project(':websocket')
        implementation project(':mov-writer')
        implementation "org.mozilla:rhino:$rhinoVersion"
        implementation "commons-io:commons-io:$iocommonsVersion"
        implementation 'javax.servlet:javax.servlet-api:3.1.0'
        implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        implementation "org.json:json:$orgJsonVersion"
        implementation 'com.google.collections:google-collections:1.0'
        implementation "org.tinylog:tinylog:$tinylogVersion"
    }

    if (project.hasProperty("release")) {
        processResources {
            exclude('chrome/extension/pizza/*.js')
            exclude('chrome/extension/pizza/manifest.json')
        }
        task minify(type: Exec) {
            commandLine 'gulp', 'enginejs'
        }
        processResources.dependsOn minify
    }
}

project(':script-editor') {
    apply plugin: 'application'
    mainClassName = "com.loadtestgo.script.editor.PizzaScript"
    applicationName = "pizzascript-ide"

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
            // RsyntaxTextArea/languagesupport brings in 1.7.6
            force "org.mozilla:rhino:$rhinoVersion"
        }
    }

    // Compress tar file
    dependencies {
        implementation project(':script-api')
        implementation project(':script-engine')
        implementation project(':util')
        implementation project(':view-metrics')
        implementation 'jline:jline:2.10'
        implementation "com.fifesoft:rsyntaxtextarea:$rsyntaxVersion"
        implementation "com.fifesoft:autocomplete:$rsyntaxVersion"
        implementation "com.fifesoft:languagesupport:$rsyntaxVersion"
        implementation "org.tinylog:tinylog:$tinylogVersion"
        implementation "org.json:json:$orgJsonVersion"
        implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    }
    distTar {
        compression = Compression.GZIP
    }
}

project(':script-runner') {
    apply plugin: 'application'
    mainClassName = "com.loadtestgo.script.runner.Main"
    applicationName = "pizzascript"

    // Compress tar file
    dependencies {
        implementation project(':script-api')
        implementation project(':script-engine')
        implementation project(':util')
        implementation project(':view-metrics')
        implementation 'jline:jline:2.10'
        implementation 'org.fusesource.jansi:jansi-project:1.13'
        implementation "org.tinylog:tinylog:$tinylogVersion"
        implementation "org.json:json:$orgJsonVersion"
        implementation "commons-io:commons-io:$iocommonsVersion"
        implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    }
    distTar {
        compression = Compression.GZIP
    }
}

project(':view-metrics') {
    if (project.hasProperty("release")) {
        processResources {
            exclude('js/*.js')
        }
        task minify(type: Exec) {
            commandLine 'gulp', 'view-metrics'
        }
        processResources.dependsOn minify
    }
}

project(':script-tester') {
    dependencies {
        implementation project(':script-api')
        implementation project(':script-engine')
        implementation project(':util')
        implementation project(':view-metrics')
        implementation 'junit:junit:4.+'
        implementation "org.json:json:$orgJsonVersion"
        implementation "org.tinylog:tinylog:$tinylogVersion"
        implementation "commons-io:commons-io:$iocommonsVersion"
    }
    configurations {
      integrationCompile.extendsFrom testCompile
      integrationRuntime.extendsFrom testRuntime
    }
    sourceSets {
        integration {
            java.srcDir file('src/main/java')
            resources.srcDir file('src/main/resources')
        }
    }
    task integration(type: Test) {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
        testClassesDirs = sourceSets.integration.output.classesDirs
        classpath = sourceSets.integration.runtimeClasspath
    }
}

project(':dist') {
  apply plugin: 'java-library-distribution'

  def projects = [ project(':script-runner'), project(':script-editor') ]
  distributions {
      main {
          distributionBaseName = "pizzascript"
          contents {
              exclude "dist-${version}.jar"
              exclude ".gitkeep"

              into('bin') {
                  def files = []
                  projects.each { p->
                      Task t = p.tasks.getByName("startScripts")
                      files.addAll(t.outputs)
                  }
                  from files
                  fileMode = 0755
              }
              into('lib') {
                  def libs = []

                  projects.each { p->
                    p.configurations.getByName("implementation").setCanBeResolved(true)
                    libs.addAll(p.configurations.implementation.resolvedConfiguration.resolvedArtifacts.file)
                    libs << p.jar
                  }

                  from libs.unique()
              }
              into('scripts') {
                  from(fileTree(dir: '../scripts', includes: ['*.js']))
              }
              into('docs') {
                  from(fileTree(dir: '../docs/api'))
                  from(file('../script-api/pizzascript.js'))
              }
          }
      }
  }
  distTar {
      compression = Compression.GZIP
  }
}

task baseDocs(type:Exec) {
    commandLine 'node_modules/.bin/jsdoc', '-c', 'script-api/jsdoc.conf', '-t', 'node_modules/jsdoc-baseline', 'script-api/pizzascript.js', 'script-api/pizzascript.md', '-d', 'docs/api'
}

task docs(dependsOn:baseDocs) doLast {
    FileTree tree = fileTree (dir: "docs/api");
    tree.include "*.html"
    tree.each { File file ->
        String contents = file.getText( 'UTF-8' )
        contents = contents.replaceAll('<title>Home</title>', '<title>PizzaScript Browser Automation API</title>' )
        contents = contents.replaceAll('<title>Module:', '<title>PizzaScript |' )
        contents = contents.replaceAll('href="index.html"', 'href="http://pizzascript.org"')
        contents = contents.replaceAll('Home</a>', 'PizzaScript</a><a class="jsdoc-navbar-package-name" href="index.html">Index</a>')
        contents = contents.replaceAll('<span class="label label-kind">module</span>', '')

        file.write( contents, 'UTF-8' )
    }
}

task 'incVersion' doLast {
    Properties props = new Properties()
    File propsFile = new File('gradle.properties')
    props.load(propsFile.newDataInputStream())
    Integer nextBuildNum = (((props.getProperty('buildNumber')) as Integer) + 1)
    props.setProperty('buildNumber', nextBuildNum.toString())
    props.store(propsFile.newWriter(), null)
    props.load(propsFile.newDataInputStream())
}
